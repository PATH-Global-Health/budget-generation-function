[
  {
    "objectID": "maunal-partner-integration.html",
    "href": "maunal-partner-integration.html",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "",
    "text": "Purpose. This document explains how our current budget generation pipeline works end‑to‑end so partners can port the logic into their own platform. It covers data contracts (upload templates), core function interface, quantification & costing methods per intervention, output schema, and items still under development."
  },
  {
    "objectID": "maunal-partner-integration.html#scenario-template-intervention-mix",
    "href": "maunal-partner-integration.html#scenario-template-intervention-mix",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "2.1 Scenario template (intervention mix)",
    "text": "2.1 Scenario template (intervention mix)\nClick here to download the scenario template.\n\nSheets: each sheet corresponds to a year that was specified in the tool at download.\nGrain: each row is one spatial targeting unit e.g. Health Zone in DRC or LGA in Nigeria.\nSPU keys: adm1, adm2, adm3 (as applicable to country), this data will be pre-populated by the tool at the correct level of intervention targeting – do not make changes to these values in cells.\nDescriptor fields: scenario_name, scenario_description, these get added to the scenario mix during upload back into the tool.\nIntervention targeting: code_* columns (0/1), one per deliverable intervention.\nIntervention type selectors: type_* columns (drop‑downs aligned one-to-one with code_*).\n\nThe figure below gives an example of what this looks like.\n\n\n\nIntervention Mix Template\n\n\nOnce a plan has been specified by indicating what interventions are to be targeted where each year the user can save a local copy of this file. Return to the web application and upload the completed Excel file using the Upload button. Give the scenario a short name: e.g. “Plan 1 BAU” and a description: e.g. “Basic mix of interventions – mass campaigns, case management and targeted SMC” – making sure these are informative descriptions as it will be helpful when comparing plans.\n\n\nSheets are per year; one workbook can cover multiple years.\nThe app pre-populates SPU keys; users must not edit the geometry keys.\nSome interventions are missing e.g. MDA and Entomological Surveillance and current specification for the type of Private Sector case management that is to be implemented and we are waiting on discussions with country programs to finalise this."
  },
  {
    "objectID": "maunal-partner-integration.html#unit-cost-template",
    "href": "maunal-partner-integration.html#unit-cost-template",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "2.2 Unit Cost template",
    "text": "2.2 Unit Cost template\nClick here to download the unit-cost template.\n\nSheets: Instructions template on how to fill in the unit-cost-data sheet, we also include a supplementary-data sheet to highlight to the user they are able to add any addiditional sheets into the excel workbook for tracking line-lists or unit-cost calculations for example.\nGrain: one unit cost line per (code_intervention, type_intervention, unit, cost_year_for_analysis).\nRequired columns: Columns A : J are required for calculations and their names must not change\n\ncode_intervention: Select from the drop down the correct intervention that cost relates to - the code will match with the columns in the code_ cells of the scenario template.\ntype_intervention: Select from the drop down list the specific type of intervention the cost relates to. These values relate to the type_ column in the scenario template. If the user wants to include any fixed costs for an intervention this is also specified in this column e.g. Fixed costs for annual warehousing of bednets during a campaign. This value must be filled in for the application to include the unit-cost correctly.\ncost_class: Select from the drop down - Procurement, Delivery, Operational, Support, Other (with detail in cost_class_other).\ncost_class_other: If selecting other in cost_class detail what this is.\ndescription: Free text to provide a short description of the components of the unit cost e.g. Net storage costs for Global Fund Warehousing per year\nunit: Select from the drop down list the specific unit for the cost e.g. Per Net, Per Child, Per Dose, Per Year etc. If the requried unit is not listed they can be added by the technical team.\nlocal_currency_cost: Monetary value for the specific unit cost in National Currency.\nexchange_rate: Exchange rate to convert from National to USD to populate unit cost values in the usd_cost column or vice versa with the local_currency_cost column.\nusd_cost: Monetary value for the specific unit cost in USD.\ncost_year_for_analysis: This value is the year of the operational plan that the unit cost should be used to calculate the budget for. If this column is left blank the same unit cost will be applied for every year of delivery in the specified plan. But there may be instances especially where the unit-cost is expected to change year on year e.g. Vaccine procurement as a result of changes in Gavi co-financing.\n\nAddiditional columns: To allow for ease of conversion of unit cost estimates that are generated from historical data to current monetary values we include the following columns:\n\noriginal_unit_cost: Unit-cost calculated from historial budgets or expenditures.\noriginal_unit_cost_year: The year of the data used to claculate the unit-cost.\ninflation_factor: Inflation rate applied to the original_unit_cost to scale to current or future values.\nnotes: Any helpful details surrounding unit cost data or things to be aware of.\nsource: Data source.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nSheet cells do not contain pre-specified formulas it is up to the user to enter or calculate data as they see appropriate.\nThe template is prepopulated with some common interventions, types of intervention, cost classes and units – these rows can be edited and/or deleted as the user requires but ensure that for each intervention being delivered in the operational plan there are unit costs for the specific intervention and intervention type. You can add extra rows but if there are any missing critical items from the unit cost spreadsheet this should be discussed with the the technical team to integrate\n\n\n\n\n\nUnit-cost Template"
  },
  {
    "objectID": "maunal-partner-integration.html#function-arguments",
    "href": "maunal-partner-integration.html#function-arguments",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "3.1 Function arguments",
    "text": "3.1 Function arguments\n#' Generate detailed intervention budget from scenarios & costs\n#'\n#' Quantifies product/service needs from scenario coverage, applies unit costs,\n#' and returns a long-form budget suitable for tables/maps/plots.\n#'\n#' @param scen_data Data frame of implementation scenarios. Must include columns:\n#'   - Spatial keys: `adm1`, `adm2` (and optionally `adm3`) depending on SPU.\n#'   - `year`, `scenario_name`, `scenario_description`\n#'   - intervention code columns like `code_itn_campaign`, `code_itn_routine`, `code_iptp`,\n#'     `code_smc`, `code_pmc`, `code_vacc`, and corresponding `type_*` columns.\n#' @param cost_data Data frame of unit/delivery costs containing at least:\n#'   `code_intervention`, `type_intervention`, `unit`, `local_currency_cost`, `usd_cost`,\n#'   and `cost_year_for_analysis` (may be NA, matched to scenario year if so).\n#' @param assumptions Character vector of \"Label = value\" strings; optional.\n#'\n#' @return A data frame with columns (subset depends on SPU):\n#'   `adm1`, `adm2`, `adm3`, `year`, `scenario_name`, `scenario_description`,\n#'   `cost_name`, `cost_description`, `code_intervention`, `type_intervention`,\n#'   `target_pop`, `unit`, `quantity`, `cost_class`, `currency`, `unit_cost`,\n#'   `cost_element`, `intervention_nice`, `assumptions_changes`, `assumption_type`, `plan_id`.\n#'\n#' @details\n#' - Uses global `spatial_planning_unit` set to one of `\"adm1\"/\"adm2\"/\"adm3\"`.\n#' - Uses global `local_currency_symbol` (labels non-USD currency rows).\n#' - Requires global `target_population` table with the necessary population columns.\n#' - Parses assumptions from strings of the form `\"Label = value\"`.\n#' - Treats rows where `type_intervention == \"Fixed cost\"` as national fixed costs.\n#' - Keeps both currencies by pivoting `*_cost` columns to `currency` and `unit_cost`.\n#' - `plan_id` is derived from `scenario_name`, `cost_name`, and assumption state.\n#'\n#' @noRd\ngenerate_budget &lt;- function(scen_data, cost_data, assumptions) {\n\n3.1.1 Currency columns expected in cost_data\n\nlocal_currency_cost and usd_cost are both supported. The function pivots these to a single currency column (values: USD or the local_currency_symbol) and a numeric unit_cost.\nCosts will only be calculated if the code_intervention and type_intervention columns are filled as these are critical for our joins.\n\n\n\n3.1.2 Spatial planning unit (SPU) behavior\n\nSPU is read from the global spatial_planning_unit. Allowed values are adm1, adm2, adm3; any other value falls back to adm2 with a warning.\nOutput includes only the geo keys for the active SPU level (e.g., adm1 only for SPU=adm1; adm1, adm2 for SPU=adm2, etc.).\n\n\n\n3.1.3 Assumptions interface\nA key part of the budget generation is allowing the user to select in the application whether or not to accept key assumptions in the quantification methods. For example the Program may be interested in comparing scenarios where the number of vaccine doses is reduced, the target population for SMC is expanded to children under 10 or an intervention coverage decreases, all of these aspects can be incorporated through the assumption adjustments.\n\nProvide overrides as a character vector like c(\"ITN Campaign: people per net = 1.8\", \"SMC: cycles = 4\").\nThe parser evaluates the right-hand side; unknown labels are ignored with a warning.\nThe function computes a human-readable summary in assumptions_changes and flags baseline vs adjusted in assumption_type."
  },
  {
    "objectID": "maunal-partner-integration.html#environment-inputs",
    "href": "maunal-partner-integration.html#environment-inputs",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "4.1 Environment & inputs",
    "text": "4.1 Environment & inputs\n\nSPU & currency: read spatial_planning_unit and local_currency_symbol from globals; validate SPU; derive spu_cols.\nScenario summary (console): identify all code_* columns, coerce to 0/1, and print a per-intervention targeted-area count by year.\nCost data prep:\n\nFilter to rows with local_currency_cost present to remove empty rows.\nNormalize cost_year_for_analysis to integer.\nYear expansion & matching: cross scenario years with cost rows; if a cost row’s cost_year_for_analysis is NA, substitute scenario year; finally filter to cost_year_for_analysis == year.\n\n\n\n\nCode\n # --- ENV OPTIONS ----------------------------------------------------------\n  # spatial level + currency symbol\n  spu &lt;- get(\"spatial_planning_unit\", envir = .GlobalEnv) %||% \"adm2\"\n  local_symbol &lt;- get(\"local_currency_symbol\", envir = .GlobalEnv) %||% \"LOCAL\"\n\n  # validate spatial_planning_unit\n  if (!spu %in% c(\"adm1\", \"adm2\", \"adm3\")) {\n    warning(\"Unrecognized spatial_planning_unit = '\", spu, \"'. Falling back to 'adm2'.\")\n    spu &lt;- \"adm2\"\n  }\n\n  # Which spatial columns to include in outputs / joins\n  spu_cols &lt;- switch(spu,\n    \"adm1\" = c(\"adm1\"),\n    \"adm2\" = c(\"adm1\", \"adm2\"),\n    \"adm3\" = c(\"adm1\", \"adm2\", \"adm3\")\n  )\n\n  sel_spu &lt;- function(...) dplyr::all_of(c(spu_cols, ...))\n\n  # --- CONSOLE SUMMARY ------------------------------------------------------\n  cat(\"Costing scenario being generated for the following mix of interventions:\\n\")\n\n  code_cols &lt;- grep(\"^code_\", names(scen_data), value = TRUE)\n  if (length(code_cols) == 0L) {\n    cat(\"No intervention columns starting with 'code_'; skipping summary.\\n\")\n  } else {\n    has1 &lt;- \"adm1\" %in% names(scen_data)\n    has2 &lt;- all(c(\"adm1\", \"adm2\") %in% names(scen_data))\n    has3 &lt;- all(c(\"adm1\", \"adm2\", \"adm3\") %in% names(scen_data))\n\n    summary_tbl &lt;-\n      scen_data %&gt;%\n      dplyr::mutate(\n        year = suppressWarnings(as.integer(year)),\n        adm1_key = if (has1) adm1 else NA_character_,\n        adm2_key = if (has2) paste(adm1, adm2, sep = \"_\") else NA_character_,\n        adm3_key = if (has3) paste(adm1, adm2, adm3, sep = \"_\") else NA_character_\n      ) %&gt;%\n      dplyr::select(\n        dplyr::any_of(c(\n          spu_cols, \"year\", \"scenario_name\", \"scenario_description\",\n          code_cols, \"adm1_key\", \"adm2_key\", \"adm3_key\"\n        ))\n      ) %&gt;%\n      tidyr::pivot_longer(\n        dplyr::all_of(code_cols),\n        names_to = \"intervention\",\n        names_prefix = \"code_\",\n        values_to = \"included\"\n      ) %&gt;%\n      dplyr::mutate(\n        included = dplyr::case_when(\n          is.logical(included) ~ as.integer(included),\n          is.numeric(included) ~ as.integer(included == 1),\n          is.character(included) ~ as.integer(tolower(trimws(included)) %in% c(\"1\", \"true\", \"yes\", \"y\")),\n          TRUE ~ 0L\n        )\n      ) %&gt;%\n      dplyr::filter(included == 1L) %&gt;%\n      dplyr::group_by(intervention, year) %&gt;%\n      dplyr::summarise(\n        adm1_targeted = if (has1) dplyr::n_distinct(adm1_key[!is.na(adm1_key)]) else NA_integer_,\n        adm2_targeted = if (has2) dplyr::n_distinct(adm2_key[!is.na(adm2_key)]) else NA_integer_,\n        adm3_targeted = if (has3) dplyr::n_distinct(adm3_key[!is.na(adm3_key)]) else NA_integer_,\n        .groups = \"drop\"\n      )\n    print(summary_tbl)\n  }\n\n  cat(scen_data$scenario_description[1] %||% \"\", \"\\n\")\n\n  # --- COST DATA ------------------------------------------------------------\n  cost_data &lt;- cost_data |&gt;\n    dplyr::filter(!is.na(local_currency_cost)) |&gt;\n    dplyr::mutate(cost_year_for_analysis = as.integer(cost_year_for_analysis))\n\n  cost_data_expanded &lt;- scen_data |&gt;\n    dplyr::distinct(year) |&gt;\n    tidyr::crossing(cost_data) |&gt;\n    dplyr::mutate(\n      cost_year_for_analysis = dplyr::if_else(is.na(cost_year_for_analysis), year, cost_year_for_analysis)\n    ) |&gt;\n    dplyr::filter(cost_year_for_analysis == year)"
  },
  {
    "objectID": "maunal-partner-integration.html#assumption-parsing-defaults",
    "href": "maunal-partner-integration.html#assumption-parsing-defaults",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "4.2 Assumption parsing & defaults",
    "text": "4.2 Assumption parsing & defaults\n\nAssumptions are parsed from labeled strings. Key labels include (examples):\n\nITN Campaign: people per net, nets per bale, buffer (%), target population, target population coverage.\nITN Routine: target population, target population coverage, buffer (%).\nIPTp: ANC attendance, contact points, drug supply buffer.\nSMC: age targeting (e.g., proportion of under 5 population aged 3-11 months or 12-59 months \"0.18,0.77\"), cycles, target population coverage, drug supply buffer.\nPMC: coverage, contact points, nutrition scaling factor, drug supply buffer.\nVaccine: coverage, number of doses, supply buffer.\n\nHelper maps assumption labels like “Total population”, “Children under 5”, “Pregnant women” to canonical population columns in target_population (e.g., pop_total, pop_0_5, pop_pw, etc.).\n\n\n\nCode\n# --- ASSUMPTIONS ----------------------------------------------------------\n  assumptions &lt;- unlist(assumptions)\n  target_population &lt;- target_population\n\n  if (!is.null(assumptions) && length(assumptions) &gt; 0) {\n    assumption_list &lt;- purrr::map_chr(assumptions, ~.x) |&gt;\n      rlang::set_names(purrr::map_chr(strsplit(assumptions, \" = \"), 1)) |&gt;\n      purrr::map(~ eval(parse(text = strsplit(.x, \" = \")[[1]][2])))\n  } else {\n    assumption_list &lt;- list()\n  }\n\n  get_assumption &lt;- function(label, default) {\n    if (!is.null(assumption_list[[label]])) assumption_list[[label]] else default\n  }\n\n  itn_campaign_divisor &lt;- get_assumption(\"ITN Campaign: people per net\", 1.8)\n  itn_campaign_bale_size &lt;- get_assumption(\"ITN Campaign: nets per bale\", 50)\n  itn_campaign_buffer_mult &lt;- 1 + get_assumption(\"ITN Campaign: buffer (%)\", 0.10)\n  itn_campaign_coverage &lt;- get_assumption(\"ITN Campaign: target population coverage\", 1.00)\n\n  itn_routine_coverage &lt;- get_assumption(\"ITN Routine: target population coverage\", 0.30)\n  itn_routine_buffer_mult &lt;- 1 + get_assumption(\"ITN Routine: buffer (%)\", 0.10)\n\n  iptp_anc_coverage &lt;- get_assumption(\"IPTp: ANC attendance\", 0.80)\n  iptp_doses_per_pw &lt;- get_assumption(\"IPTp: contact points\", 3)\n  iptp_buffer_mult &lt;- 1 + get_assumption(\"IPTp: drug supply buffer\", 0.10)\n\n  smc_age_string &lt;- get_assumption(\"SMC: age targeting\", \"0.18,0.77\")\n  smc_split &lt;- as.numeric(strsplit(smc_age_string, \",\")[[1]])\n  smc_pop_prop_3_11 &lt;- smc_split[1]\n  smc_pop_prop_12_59 &lt;- smc_split[2]\n  smc_coverage &lt;- get_assumption(\"SMC: target population coverage\", 1.00)\n  smc_monthly_rounds &lt;- get_assumption(\"SMC: cycles\", 4)\n  smc_buffer_mult &lt;- 1 + get_assumption(\"SMC: drug supply buffer\", 0.10)\n\n  pmc_coverage &lt;- get_assumption(\"PMC: coverage\", 0.85)\n  pmc_touchpoints &lt;- get_assumption(\"PMC: contact points\", 4)\n  pmc_tablet_factor &lt;- get_assumption(\"PMC: nutrition scaling factor\", 0.75)\n  pmc_buffer_mult &lt;- 1 + get_assumption(\"PMC: drug supply buffer\", 0.10)\n\n  vacc_coverage &lt;- get_assumption(\"Vaccine: coverage\", 0.84)\n  vacc_doses_per_child &lt;- get_assumption(\"Vaccine: number of doses\", 4)\n  vacc_buffer_mult &lt;- 1 + get_assumption(\"Vaccine: supply buffer\", 0.10)\n\n  get_pop_column &lt;- function(label, default_col) {\n    pop_assumption &lt;- assumption_list[[label]]\n    if (is.null(pop_assumption)) {\n      return(default_col)\n    }\n\n    mapping &lt;- list(\n      \"Total population\"                           = \"pop_total\",\n      \"Children under 5\"                           = \"pop_0_5\",\n      \"Children under 5 and pregnant women\"        = c(\"pop_0_5\", \"pop_pw\"),\n      \"Children under 10\"                          = c(\"pop_0_5\", \"pop_5_10\"),\n      \"Children 3 months to 5 years\"               = \"pop_0_5\",\n      \"Children 3 months to 10 years\"              = c(\"pop_0_5\", \"pop_5_10\"),\n      \"Children 0-1\"                               = \"pop_0_1\",\n      \"Children 1-2\"                               = \"pop_1_2\",\n      \"Children 5-10\"                              = \"pop_5_10\",\n      \"Children 5–36 months\"                       = \"pop_vaccine_5_36_months\",\n      \"Pregnant women\"                             = \"pop_pw\",\n      \"Urban population\"                           = \"pop_urban\"\n    )\n\n    mapped_col &lt;- mapping[[pop_assumption]]\n    if (!is.null(mapped_col)) {\n      mapped_col\n    } else {\n      warning(paste(\"Unrecognized target population assumption:\", pop_assumption))\n      default_col\n    }\n  }\n\n  itn_campaign_pop_col &lt;- get_pop_column(\"ITN Campaign: target population\", \"pop_total\")\n  itn_routine_pop_col &lt;- get_pop_column(\"ITN Routine: target population\", c(\"pop_0_5\", \"pop_pw\"))\n  smc_pop_col &lt;- get_pop_column(\"SMC: target population\", \"pop_0_5\")"
  },
  {
    "objectID": "maunal-partner-integration.html#quantification-by-intervention",
    "href": "maunal-partner-integration.html#quantification-by-intervention",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "4.3 Quantification by intervention",
    "text": "4.3 Quantification by intervention\nBelow, target_pop always reflects coverage-adjusted counts where applicable; units are normalized to friendly labels - that will match those that are specified in the drop down lists of the unit-cost template to allow for joining of commodity quantification data and unit cost data for cost calculations. All intervention quantifications are claculated at the level of the spatial_planning_unit.\n\n4.3.1 ITN — Campaign (code_itn_campaign)\nTo estimate the number of insecticide-treated nets (ITNs) needed for campaign delivery in targeted areas:\nThe target population (default: total pop) of the area is multiplied by the target intervention coverage (default: 100%) to estimate the target population for the campaign and then divided by the number of people assumed to use 1 net (default: 1.8). A buffer (default: 10%) is applied to account for wastage and contingency. The number of bales is calculated by dividing the number of nets by 50 (assuming 50 nets per bale).\n\\[{ITNs Needed} =  \\frac{(Target Population * Coverage)}{PeoplePerNet}Buffer  \\]\n\n\nCode\n# --- ITN CAMPAIGN ----------------------------------------------------------\n  itn_campaign_quantifications &lt;-\n    scen_data |&gt;\n    dplyr::select(\n      dplyr::all_of(c(spu_cols, \"year\")), dplyr::contains(\"itn_campaign\"),\n      scenario_name, scenario_description\n    ) |&gt;\n    dplyr::filter(code_itn_campaign == 1) |&gt;\n    dplyr::left_join(\n      target_population |&gt;\n        dplyr::select(dplyr::all_of(c(spu_cols, \"year\", itn_campaign_pop_col))),\n      by = c(stats::setNames(join_keys, join_keys), \"year\" = \"year\")\n    ) |&gt;\n    dplyr::rowwise() |&gt;\n    dplyr::mutate(target_pop = sum(dplyr::c_across(dplyr::all_of(itn_campaign_pop_col)), na.rm = TRUE)) |&gt;\n    dplyr::ungroup() |&gt;\n    dplyr::select(-dplyr::all_of(itn_campaign_pop_col)) |&gt;\n    dplyr::mutate(\n      quant_nets = ((target_pop * itn_campaign_coverage) / itn_campaign_divisor) * itn_campaign_buffer_mult,\n      quant_bales = quant_nets / itn_campaign_bale_size,\n      target_pop = target_pop * itn_campaign_coverage,\n      code_intervention = \"itn_campaign\",\n      type_intervention = type_itn_campaign\n    ) |&gt;\n    tidyr::pivot_longer(\n      cols = dplyr::starts_with(\"quant\"),\n      names_to = \"unit\", values_to = \"quantity\", names_prefix = \"quant_\"\n    ) |&gt;\n    dplyr::mutate(unit = dplyr::case_when(\n      unit == \"nets\" ~ \"per ITN\",\n      unit == \"bales\" ~ \"per bale\",\n      TRUE ~ unit\n    ))\n\n\n\n\n4.3.2 ITN — Routine (code_itn_routine)\nTo estimate the number of nets needed for routine delivery channels often through ANC and EPI services, the target population (default: total under 5 and pregnant women population) of an area is multiplied by the expected routine distribution coverage (default: 30%) and a procurement buffer (default: 10%).\n\\[ITNs Needed =  Target Population * Coverage * Buffer  \\]\n\n\nCode\n# --- ITN ROUTINE -----------------------------------------------------------\n  itn_routine_quantifications &lt;-\n    scen_data |&gt;\n    dplyr::select(\n      dplyr::all_of(c(spu_cols, \"year\")), dplyr::contains(\"itn_routine\"),\n      scenario_name, scenario_description\n    ) |&gt;\n    dplyr::filter(code_itn_routine == 1) |&gt;\n    dplyr::left_join(\n      target_population |&gt;\n        dplyr::select(dplyr::all_of(c(spu_cols, \"year\", itn_routine_pop_col))),\n      by = c(stats::setNames(join_keys, join_keys), \"year\" = \"year\")\n    ) |&gt;\n    dplyr::rowwise() |&gt;\n    dplyr::mutate(target_pop = sum(dplyr::c_across(dplyr::all_of(itn_routine_pop_col)), na.rm = TRUE)) |&gt;\n    dplyr::ungroup() |&gt;\n    dplyr::select(-dplyr::all_of(itn_routine_pop_col)) |&gt;\n    dplyr::mutate(\n      quant_nets = (target_pop * itn_routine_coverage) * itn_routine_buffer_mult,\n      code_intervention = \"itn_routine\",\n      type_intervention = type_itn_routine\n    ) |&gt;\n    tidyr::pivot_longer(\n      cols = dplyr::starts_with(\"quant\"),\n      names_to = \"unit\", values_to = \"quantity\", names_prefix = \"quant_\"\n    ) |&gt;\n    dplyr::mutate(unit = dplyr::case_when(\n      unit == \"nets\" ~ \"per ITN\",\n      unit == \"bales\" ~ \"per bale\",\n      TRUE ~ unit\n    ))\n\n\n\n\n4.3.3 IPTp (code_iptp)\nTo estimate the amount of SP (blister packs of 3 pills) to procure for IPTp we take the target population (default: pregnant women) of an area, multiply by the expected coverage at ANC attendence (default: 80%) for the scheduled number of touchpoints per woman (default: 3) and multiply this by a procurement buffer (default: 10%).\n\\[SP Quantity =  Target Population * Coverage * Touch Points * Buffer  \\]\n\n\nCode\n# --- IPTp ------------------------------------------------------------------\n  iptp_quantifications &lt;-\n    scen_data |&gt;\n    dplyr::select(\n      dplyr::all_of(c(spu_cols, \"year\")), dplyr::contains(\"iptp\"),\n      scenario_name, scenario_description\n    ) |&gt;\n    dplyr::filter(code_iptp == 1) |&gt;\n    dplyr::left_join(\n      target_population |&gt;\n        dplyr::select(dplyr::all_of(c(spu_cols, \"year\", \"pop_pw\"))),\n      by = c(stats::setNames(join_keys, join_keys), \"year\" = \"year\")\n    ) |&gt;\n    dplyr::mutate(\n      quant_sp_doses = ((pop_pw * iptp_anc_coverage) * iptp_doses_per_pw) * iptp_buffer_mult,\n      target_pop = pop_pw,\n      code_intervention = \"iptp\",\n      type_intervention = type_iptp\n    ) |&gt;\n    tidyr::pivot_longer(\n      cols = dplyr::starts_with(\"quant\"),\n      names_to = \"unit\", values_to = \"quantity\", names_prefix = \"quant_\"\n    ) |&gt;\n    dplyr::mutate(unit = dplyr::case_when(unit == \"sp_doses\" ~ \"per SP\", TRUE ~ unit))\n\n\n\n\n4.3.4 SMC (code_smc)\nTo estimate the number of SP+AQ co-blistered packets required for Seasonal Malaria Chemoprevention (SMC), we use the following methodology with the default assumptions included here for clarity. We first assume each packet contains one full course for a single cycle (1 tablet of SP and 3 tablets of AQ). SMC is at default delivered over 4 monthly cycles and targets two age groups: children aged 3 to &lt;12 months and children aged &gt;12 to 59 months. We include the distribution of age-groups as the procurement costs of the co-blistered packets for these different age groups vary as a result of the age-based dosing requirements for SMC drugs.\nWe first estimate the target population by applying fixed proportions to the total number of children under 5 years of age. Coverage of the target population is assumed to be 100%, unless otherwise specified, and is applied before the buffer is calculated. A 10% buffer is then included to account for re-dosing, wastage, and the treatment of children from outside the catchment area.\n\\[SMCBlisterPacks_{age-group} =  (TargetPopulation_{age-group} * Coverage * Monthly Cycles) * Buffer \\]\n\n\nCode\n# --- SMC -------------------------------------------------------------------\n  include_5_10 &lt;- any(grepl(\"5_10\", smc_pop_col))\n  smc_quantification &lt;-\n    scen_data |&gt;\n    dplyr::select(\n      dplyr::all_of(c(spu_cols, \"year\")), dplyr::contains(\"smc\"),\n      scenario_name, scenario_description\n    ) |&gt;\n    dplyr::filter(code_smc == 1) |&gt;\n    dplyr::left_join(\n      target_population |&gt;\n        dplyr::select(dplyr::all_of(c(spu_cols, \"year\", smc_pop_col))),\n      by = c(stats::setNames(join_keys, join_keys), \"year\" = \"year\")\n    ) |&gt;\n    dplyr::mutate(\n      quant_smc_spaq_3_11_months = ((pop_0_5 * smc_pop_prop_3_11) * smc_coverage) * smc_monthly_rounds * smc_buffer_mult,\n      quant_smc_spaq_12_59_months = ((pop_0_5 * smc_pop_prop_12_59) * smc_coverage) * smc_monthly_rounds * smc_buffer_mult,\n      quant_smc_spaq_5_10_years = if (include_5_10) (pop_5_10 * smc_coverage) * smc_monthly_rounds * smc_buffer_mult else 0,\n      quant_smc_child = if (include_5_10) {\n        ((pop_0_5 * (smc_pop_prop_3_11 + smc_pop_prop_12_59)) + pop_5_10) * smc_coverage\n      } else {\n        (pop_0_5 * (smc_pop_prop_3_11 + smc_pop_prop_12_59)) * smc_coverage\n      },\n      target_pop = quant_smc_child,\n      code_intervention = \"smc\",\n      type_intervention = type_smc\n    ) |&gt;\n    tidyr::pivot_longer(\n      cols = dplyr::starts_with(\"quant\"),\n      names_to = \"unit\", values_to = \"quantity\", names_prefix = \"quant_smc_\"\n    ) |&gt;\n    dplyr::mutate(\n      unit = dplyr::case_when(\n        unit == \"spaq_3_11_months\" ~ \"per SPAQ pack 3-11 month olds\",\n        unit == \"spaq_12_59_months\" ~ \"per SPAQ pack 12-59 month olds\",\n        unit == \"spaq_5_10_years\" ~ \"per SPAQ pack 5–10 years old\",\n        unit == \"child\" ~ \"per child\",\n        TRUE ~ unit\n      )\n    )\n\n\n\n\n4.3.5 PMC (code_pmc)\nTo estimate the quantity of sulfadoxine-pyrimethamine (SP) required for Perennial Malaria Chemoprevention (PMC), we assume delivery is integrated into routine Expanded Programme on Immunization (EPI). Each eligible child receives SP at four routine immunization touchpoints per year, with age-specific dosing:\n\nChildren aged 0–1 years receive 1 tablet of SP per contact.\nChildren aged 1–2 years receive 2 tablets of SP per contact.\n\nTo account for underdosing due to low weight, which affects approximately 25% of children in each age group, a scaling factor of 0.75 is applied to both age groups. This factor reflects the average reduction in tablets required due to dose adjustment (e.g., half tablets for underweight infants).\nAn 85% coverage rate is assumed and a 10% procurement buffer is then included to cover wastage, re-dosing, and stockouts.\n\\[SP Quantity = [(pop_{0-1} * tablet_{0-1}) + (pop_{1-2} * tablet_{1-2})] * Coverage * ScalingFactor * Touchpoints * Buffer \\]\n\n\nCode\n# --- PMC -------------------------------------------------------------------\n  pmc_quantification &lt;-\n    scen_data |&gt;\n    dplyr::select(\n      dplyr::all_of(c(spu_cols, \"year\")), dplyr::contains(\"pmc\"),\n      scenario_name, scenario_description\n    ) |&gt;\n    dplyr::filter(code_pmc == 1) |&gt;\n    dplyr::left_join(\n      target_population |&gt;\n        dplyr::select(dplyr::all_of(c(spu_cols, \"year\", \"pop_0_1\", \"pop_1_2\"))),\n      by = c(stats::setNames(join_keys, join_keys), \"year\" = \"year\")\n    ) |&gt;\n    dplyr::mutate(\n      quant_pmc_sp_0_1_years = pop_0_1 * pmc_coverage * pmc_touchpoints * pmc_tablet_factor * pmc_buffer_mult,\n      quant_pmc_sp_1_2_years = pop_1_2 * pmc_coverage * pmc_touchpoints * 2 * pmc_tablet_factor * pmc_buffer_mult,\n      quant_pmc_sp_total     = quant_pmc_sp_0_1_years + quant_pmc_sp_1_2_years,\n      quant_pmc_child        = pop_0_1 * pmc_coverage + pop_1_2 * pmc_coverage,\n      target_pop             = quant_pmc_child,\n      code_intervention      = \"pmc\",\n      type_intervention      = type_pmc\n    ) |&gt;\n    dplyr::select(-quant_pmc_sp_0_1_years, -quant_pmc_sp_1_2_years) |&gt;\n    tidyr::pivot_longer(\n      cols = dplyr::starts_with(\"quant\"),\n      names_to = \"unit\", values_to = \"quantity\", names_prefix = \"quant_pmc_\"\n    ) |&gt;\n    dplyr::mutate(\n      unit = dplyr::case_when(\n        unit == \"sp_total\" ~ \"per SP\",\n        unit == \"child\" ~ \"per child\",\n        TRUE ~ unit\n      )\n    )\n\n\n\n\n4.3.6 Vaccine (code_vacc)\nTo estimate the number of malaria vaccine doses required, at default, we assume each eligible child will receive a 4-dose schedule. Assuming the first three doses are delivered monthly and start around 5 months of age and the 4th dose is delivered ~12 – 15 months following the 3rd dose. The vaccine is delivered through routine immunization contacts with an expected coverage of 84% among the target population. A 10% buffer is included to account for losses during transportation, storage, and administration.\n\\[VaccineDoses = Target Pop * Coverage * DosesPerChild * Buffer \\]\n\n\nCode\n# --- VACCINE ---------------------------------------------------------------\n  vacc_quantification &lt;-\n    scen_data |&gt;\n    dplyr::select(\n      dplyr::all_of(c(spu_cols, \"year\")), dplyr::contains(\"vacc\"),\n      scenario_name, scenario_description\n    ) |&gt;\n    dplyr::filter(code_vacc == 1) |&gt;\n    dplyr::left_join(\n      target_population |&gt;\n        dplyr::select(dplyr::all_of(c(spu_cols, \"year\", \"pop_vaccine_5_36_months\"))),\n      by = c(stats::setNames(join_keys, join_keys), \"year\" = \"year\")\n    ) |&gt;\n    dplyr::mutate(\n      quant_vacc_doses = pop_vaccine_5_36_months * vacc_coverage * vacc_buffer_mult * vacc_doses_per_child,\n      quant_vacc_child = pop_vaccine_5_36_months * vacc_coverage,\n      target_pop = quant_vacc_child,\n      code_intervention = \"vacc\",\n      type_intervention = type_vacc\n    ) |&gt;\n    tidyr::pivot_longer(\n      cols = dplyr::starts_with(\"quant\"),\n      names_to = \"unit\", values_to = \"quantity\", names_prefix = \"quant_vacc_\"\n    ) |&gt;\n    dplyr::mutate(\n      unit = dplyr::case_when(\n        unit == \"doses\" ~ \"per dose\",\n        unit == \"child\" ~ \"per child\",\n        TRUE ~ unit\n      )\n    )\n\n\n\n\n4.3.7 Baseline assumptions (defaults summary)\n\n\n\nParameter\nDefault\nNotes\n\n\n\n\npeople_per_net\n1.8\nITN campaign\n\n\nitn_campaign_cov\n1.00\n100% of total population\n\n\nnets_per_bale\n50\n\n\n\nbuffer\n0.10\napplied post‑coverage\n\n\nitn_routine_cov\n0.30\nof U5 + pregnant women\n\n\niptp_anc_cov\n0.80\nANC attendance proxy\n\n\niptp_touchpoints\n3\nper pregnancy\n\n\nsmc_cycles\n4\nmonthly\n\n\nsmc_cov\n1.00\nof target population\n\n\nu5_split_3_11\n0.18\nfraction of U5\n\n\nu5_split_12_59\n0.77\nfraction of U5\n\n\npmc_touchpoints\n4\nvia EPI\n\n\npmc_nutrition_factor\n0.75\ndose scaling\n\n\npmc_cov\n0.85\nEPI coverage\n\n\nvac_doses_per_child\n4\nRTS,S or R21\n\n\nvac_cov\n0.84\nEPI coverage\n\n\nvac_wastage\n0.10\nbuffer/wastage\n\n\n\nUsers may override any parameter via the specific selections in the UI."
  },
  {
    "objectID": "maunal-partner-integration.html#intervention-costing",
    "href": "maunal-partner-integration.html#intervention-costing",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "4.4 Intervention costing",
    "text": "4.4 Intervention costing\nQuantified dataframes get joined with the cost_data_expanded (accounting for the years in the scenario), and are joined on c(\"code_intervention\", \"type_intervention\", \"unit\", \"year\" = \"cost_year_for_analysis\").\nOnce joined we simply pivot longer to ensure we have one row for each of the different currency types and costs are calculated by multiplying the quantity * unit_cost.\n\n\nCode\n# --- COMBINE & COST --------------------------------------------------------\n  budget &lt;-\n    dplyr::bind_rows(\n      safe_quantification(itn_campaign_quantifications),\n      safe_quantification(itn_routine_quantifications),\n      safe_quantification(iptp_quantifications),\n      safe_quantification(smc_quantification),\n      safe_quantification(pmc_quantification),\n      safe_quantification(vacc_quantification)\n    ) |&gt;\n    dplyr::left_join(\n      cost_data_expanded |&gt; dplyr::select(-year, -original_unit_cost),\n      by = c(\"code_intervention\", \"type_intervention\", \"unit\", \"year\" = \"cost_year_for_analysis\")\n    ) |&gt;\n    tidyr::pivot_longer(\n      cols = tidyselect::ends_with(\"_cost\"),\n      names_to = \"currency\",\n      values_to = \"unit_cost\"\n    ) |&gt;\n    dplyr::mutate(\n      cost_element = quantity * unit_cost,\n      currency = dplyr::if_else(currency == \"usd_cost\", \"USD\", local_symbol),\n      intervention_nice = dplyr::case_when(\n        code_intervention == \"cm_public\" ~ \"Case Management Public\",\n        code_intervention == \"cm_private\" ~ \"Case Management Private\",\n        code_intervention == \"iptp\" ~ \"IPTp\",\n        code_intervention == \"vacc\" ~ \"Vaccine\",\n        code_intervention == \"itn_routine\" ~ \"Routine ITN\",\n        code_intervention == \"itn_campaign\" ~ \"Campaign ITN\",\n        code_intervention == \"smc\" ~ \"SMC\",\n        code_intervention == \"pmc\" ~ \"PMC\",\n        code_intervention == \"irs\" ~ \"IRS\",\n        code_intervention == \"lsm\" ~ \"LSM\",\n        TRUE ~ code_intervention\n      )\n    ) |&gt;\n    dplyr::select(\n      dplyr::all_of(spu_cols), year,\n      scenario_name, scenario_description,\n      cost_name, cost_description,\n      code_intervention, type_intervention,\n      target_pop, unit, quantity,\n      cost_class, currency, unit_cost, cost_element,\n      intervention_nice\n    ) |&gt;\n    dplyr::filter(cost_element != 0)\n\n\n\n\n\n\n\n\n\nIntervention\nCost Component Examples\n\n\n\n\nITN Campaign\n\nProcurement cost = Number of nets × unit cost per net.\nDelivery cost = Number of nets or bales x unit delivery cost per net or bale.\nOperational campaign costs = Number of nets × operational cost per net.\n\n\n\nITN Routine\n\nProcurement cost = Number of nets × unit cost per net.\nDelivery cost = Number of nets x unit delivery cost per net.\nOperational costs = Number of nets × operational cost per net.\n\n\n\nIPTp\n\nProcurement cost = SP quantity × procurement unit cost per SP.\nDelivery cost = SP quantity x delivery unit cost per SP.\n\n\n\nSMC\n\nProcurement cost = SP+AQ quantity × procurement unit cost per SP+AQ.\nDelivery cost = SP+AQ quantity x delivery unit cost per SP+AQ.\nOperational cost = Target Population x operational unit cost per child.\n\n\n\nPMC\n\nProcurement cost = SP quantity × procurement unit cost per SP.\nDelivery cost = SP quantity x delivery unit cost per SP.\nOperational cost = Target Population x operational unit cost per child or per SP.\n\n\n\nVaccine\n\nProcurement cost = Dose quantity × procurement unit cost per dose.\nDelivery cost = Dose quantity x delivery unit cost per dose.\nOperational cost = Target Population x operational unit cost per child."
  },
  {
    "objectID": "maunal-partner-integration.html#fixed-costs",
    "href": "maunal-partner-integration.html#fixed-costs",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "4.5 Fixed Costs",
    "text": "4.5 Fixed Costs\nFixed costs (do not vary directly with units delivered), we currently have fixed costs implemented minimally but these will be further developed once we understand expected fixed costs from country programs.\n\nLump sum Nationally : Include as an interventio specific single line in the final budget that will be incorporated when summing budgets at the national level .\nEmbedded in unit costs: incorporate within delivery or procurement unit costs during costing.\n\n\n\nCode\n# Fixed costs (national-level currently)\n  fixed_budget &lt;- cost_data_expanded |&gt;\n    dplyr::filter(type_intervention == \"Fixed cost\") |&gt;\n    tidyr::pivot_longer(\n      cols = tidyselect::ends_with(\"_cost\"),\n      names_to = \"currency\",\n      values_to = \"unit_cost\"\n    ) |&gt;\n    dplyr::mutate(\n      currency = dplyr::if_else(currency == \"usd_cost\", \"USD\", local_symbol),\n      adm1 = NA_character_, adm2 = NA_character_, adm3 = NA_character_,\n      scenario_name = unique(scen_data$scenario_name)[1],\n      scenario_description = unique(scen_data$scenario_description)[1],\n      cost_name = cost_data$cost_name[1],\n      cost_description = cost_data$cost_description[1],\n      target_pop = NA_real_,\n      quantity = 1,\n      cost_element = unit_cost * quantity,\n      intervention_nice = dplyr::case_when(\n        code_intervention == \"cm_public\" ~ \"Case Management Public\",\n        code_intervention == \"cm_private\" ~ \"Case Management Private\",\n        code_intervention == \"iptp\" ~ \"IPTp\",\n        code_intervention == \"vacc\" ~ \"Vaccine\",\n        code_intervention == \"itn_routine\" ~ \"Routine ITN\",\n        code_intervention == \"itn_campaign\" ~ \"Campaign ITN\",\n        code_intervention == \"smc\" ~ \"SMC\",\n        code_intervention == \"pmc\" ~ \"PMC\",\n        code_intervention == \"irs\" ~ \"IRS\",\n        code_intervention == \"lsm\" ~ \"LSM\",\n        TRUE ~ code_intervention\n      )\n    ) |&gt;\n    dplyr::select(\n      adm1, adm2, adm3, year,\n      scenario_name, scenario_description,\n      cost_name, cost_description,\n      code_intervention, type_intervention,\n      target_pop, unit, quantity,\n      cost_class, currency, unit_cost, cost_element,\n      intervention_nice\n    )"
  },
  {
    "objectID": "maunal-partner-integration.html#output-data-frame",
    "href": "maunal-partner-integration.html#output-data-frame",
    "title": "Budget Generation Function — Partner Integration Guide",
    "section": "4.6 Output data frame",
    "text": "4.6 Output data frame\n\n\nCode\nbudget_final &lt;- dplyr::bind_rows(budget, fixed_budget) |&gt;\n    dplyr::select(dplyr::all_of(c(\n      spu_cols, \"year\",\n      \"scenario_name\", \"scenario_description\",\n      \"cost_name\", \"cost_description\",\n      \"code_intervention\", \"type_intervention\",\n      \"target_pop\", \"unit\", \"quantity\",\n      \"cost_class\", \"currency\", \"unit_cost\", \"cost_element\",\n      \"intervention_nice\"\n    )))\n\n  # --- ASSUMPTION SUMMARY & PLAN ID -----------------------------------------\n  assumption_summary &lt;- if (length(assumption_list) &gt; 0) {\n    paste(names(assumption_list), unlist(assumption_list), sep = \" = \", collapse = \"; \")\n  } else {\n    \"default values\"\n  }\n\n  budget_final &lt;- budget_final |&gt;\n    dplyr::mutate(\n      assumptions_changes = assumption_summary,\n      assumption_type = dplyr::if_else(assumption_summary == \"default values\", \"baseline assumptions\", \"adjusted assumptions\"),\n      plan_id = paste0(scenario_name, \" with \", cost_name, \" with \", assumption_type),\n      plan_id = dplyr::if_else(\n        assumption_type == \"adjusted assumptions\",\n        paste0(plan_id, \" (\", assumptions_changes, \")\"),\n        plan_id\n      )\n    )\n\n  # Final return\n  return(budget_final)\n}\n\n\nFinal budget dataframe includes the following columns:\n [1] \"adm1\"                 \"adm2\"                \n [3] \"adm3\"                 \"year\"                \n [5] \"scenario_name\"        \"scenario_description\"\n [7] \"cost_name\"            \"cost_description\"    \n [9] \"code_intervention\"    \"type_intervention\"   \n[11] \"target_pop\"           \"unit\"                \n[13] \"quantity\"             \"cost_class\"          \n[15] \"currency\"             \"unit_cost\"           \n[17] \"cost_element\"         \"intervention_nice\"   \n[19] \"assumptions_changes\"  \"assumption_type\"     \n[21] \"plan_id\"              \"file_path\"    \nThis dataset is kept at the spatial_planning_unit scale and with itemised interventio cost components. During the visualisation component of our tool is when data is aggregated up to give us a National summary of the total expected cost for a scenario along with intervention specific total costs.\n\n\n\n\n\n\nNote 2: Missing Methodology\n\n\n\n\nIRS (quantification & costing): wall surface area, sprayable structures, insecticide sachets, spray days, teams, PPE, transport, subnational rotation of insecticides.\n\nTo estimate the amount of insecticide required for an IRS spray round, the following is needed: N: number of houses to be sprayed (expressed as the percentage of modern and traditional structures); S: average sprayable surface per house in m2 (modern and traditional structures); C: concentration of AI in the formulation (% AI); and Y: target dosage, expressed in g/m2 (application rate), of insecticide to be used on each type of structure according to the product’s label.\nInsecticide needed = (S * Y * 100 / C) * N\n\nCase management: incidence‑based quantification (RDTs, ACTs, Severe malaria treatments (Artesunate, RAS) and consumables), facility vs community delivery mixes, private sector subsidies.\nMDA: Target population, Number of rounds, Number of doses, Coverage Buffer and expected drug types (different to first line treatment).\nLarval Source Management (quantification and costing): depending on approach to be used (habitat modification, larviciding, biological control.\nSurveillance/M&E: entomological monitoring, routine surveillance strengthening.\nFunding source assignment: mapping lines to funders for gap analysis.\nSubnational unit costs: full support for SPU‑scoped cost lines in joins.\nPlus Others directed by the program\n\nEach item will be integrated with the same pattern: quantify → multiply by unit costs → aggregate or fixed cost approach\nIn addidition we still need to improve our current coding functionality to allow some more flexibility in matching unit costs correctly and clean our codebase/ stress test this further."
  }
]